version: '3'

dotenv: ['.env']

tasks:
  db:backup:
    cmds:
      - PGPASSWORD=$DATABASE_PASSWORD pg_dump -U $DATABASE_USER -h $DATABASE_HOST -p $DATABASE_PORT -Fc $DATABASE_NAME > backup.pgsql
    desc: Backs up the production database.
    silent: true

  db:info:
    cmds:
      - docker run --rm
        -e FLYWAY_PASSWORD={{.DATABASE_PASSWORD}}
        -e FLYWAY_URL=jdbc:postgresql://{{.DATABASE_HOST}}:{{.DATABASE_PORT}}/{{.DATABASE_NAME}}
        -e FLYWAY_USER={{.DATABASE_USER}}
        -v {{.PWD}}/flyway/sql:/flyway/sql
        -v {{.PWD}}/flyway/conf:/flyway/conf
        flyway/flyway info
    desc: Prints the details and status information about all the migrations.
    dir: ..
    silent: true
    vars:
      PWD: $(pwd)

  db:migrate:
    cmds:
      - docker run --rm
        -e FLYWAY_PASSWORD={{.DATABASE_PASSWORD}}
        -e FLYWAY_URL=jdbc:postgresql://{{.DATABASE_HOST}}:{{.DATABASE_PORT}}/{{.DATABASE_NAME}}
        -e FLYWAY_USER={{.DATABASE_USER}}
        -v {{.PWD}}/flyway/sql:/flyway/sql
        -v {{.PWD}}/flyway/conf:/flyway/conf
        flyway/flyway migrate
    desc: Migrates the schema to the latest version.
    dir: ..
    silent: true
    vars:
      PWD: $(pwd)

  # --- HIDDEN & DANGEROUS COMMANDS ---

  # Drops all objects (tables, views, procedures, triggers, etc.) in the configured schemas.
  DANGEROUS:db:clean:
    cmds:
      - docker run --rm
        -e FLYWAY_PASSWORD={{.DATABASE_PASSWORD}}
        -e FLYWAY_URL=jdbc:postgresql://{{.DATABASE_HOST}}:{{.DATABASE_PORT}}/{{.DATABASE_NAME}}
        -e FLYWAY_USER={{.DATABASE_USER}}
        -v {{.PWD}}/flyway/sql:/flyway/sql
        -v {{.PWD}}/flyway/conf:/flyway/conf
        flyway/flyway clean
    dir: ..
    silent: true
    vars:
      PWD: $(pwd)

